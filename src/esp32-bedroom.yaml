# credits for initial template to https://github.com/homeautomatorza/esphome/blob/main/Lets_build_a_room_sensor/Part%200/code.yaml
# credits for part of the BLE section to https://github.com/dalehumby/ESPHome-Apple-Watch-detection
# credits for ESP32 internal sensor data to https://github.com/SeByDocKy/pvbrain2/
################################################################################
# Substitution Variables
################################################################################
substitutions:
  sketchVersion: "1.2"
  location: bedroom # bedroom or plants
  device_internal_name: esp32${location}
  device_wifi_name: esp32_${location}_wifi
  device_friendly_name: ESP32 ${location}
  device_sampling_time: 60s
  phone_uuid: "0x004C.02.15.94.A9.85.1C.06.5E.4B.19.AC.DB.DF.68.AA.8F.69.3D.00.64.9C.44.C5" #advertised name in BLE from Home Assistant App
  phone_uuid_length: (23)
  airtag_uuid: "0x004C.12.19.10" # Begining of Manufacturer Code for AirTags
  airtag_uuid_length: (27)
  buzzer_pin: GPIO21
  led_pin: GPIO2

################################################################################
# Globals
################################################################################
globals: 
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"

  - id: rssi_threshold_value # minimum RSSI value the devices need to have to be detected and alerted
    type: float
    initial_value: '-26.0'

  - id: time_threshold_value # minimum amount of time the device needs to be detected for in order to alert
    type: int
    initial_value: '0'

  - id: airtag_max_rssi_scanned
    type: int
    initial_value: '-120'

  - id: phone_max_rssi_scanned
    type: int
    initial_value: '-120'

  - id: last_event_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

################################################################################
# Board Configuration
################################################################################
esphome:
  name: ${device_internal_name}
  friendly_name: ${device_friendly_name}
  platformio_options:
    build_flags: 
      - -Wno-maybe-uninitialized

esp32:
  board: esp32dev
  framework:
    type: esp-idf # 70% Flash usage vs 90% with arduino

################################################################################
# Enable logging
################################################################################
logger:

################################################################################
# Enable debugging features
################################################################################
debug:
  update_interval: ${device_sampling_time}

################################################################################
# Enable Home Assistant API
################################################################################
api:
  reboot_timeout: 5min
  encryption:
    key: !secret api_password

################################################################################
# OTA
################################################################################
ota:
  - platform: esphome
    password: !secret ota_password

################################################################################
# WiFi
################################################################################
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_wifi_name}
    password: !secret wifi_password

captive_portal:

################################################################################
# Web Server --> do we even need it now that it is integrated to Home Assistant?
################################################################################
# web_server:
#   port: 80
#   version: 2
#   include_internal: true
#   local: true

################################################################################
# Time
################################################################################
time:
  - platform: homeassistant
    id: homeassistant_time

################################################################################
# Binary Sensors
################################################################################
binary_sensor:
  # ESP Status
  - platform: status
    name: "Status"
    id: ${device_internal_name}_status

  - platform: template
    id: room_presence
    name: "$location presence"
    device_class: occupancy
    lambda: |-
      std::string phone_uuid = "${phone_uuid}";
      std::string location = "${location}";
      unsigned long current_time = id(homeassistant_time).now().timestamp;

      if (id(room_presence_debounce).state > 0.99) { //need to change the debounce so it's more snappy?
        if ((id(${device_internal_name}_check_phone).state) && (id(${device_internal_name}_phone_rssi).state < id(rssi_threshold_value)) && (id(${device_internal_name}_airtag_rssi).state >= id(rssi_threshold_value))) {
          if (id(homeassistant_time).now().is_valid()) {

            // Check if `last_event_time` is set, and if not, initialize it
            if (id(last_event_time) == 0) {
              id(last_event_time) = current_time;
            }

            // Calculate the time difference in seconds
            unsigned long time_difference = current_time - id(last_event_time);

            if (time_difference >= 300) {  // If a lot of time has passed, let's reset it...
              id(last_event_time) = current_time;
              return id(room_presence).state;
            } else if (time_difference >= id(rssi_threshold_value)) {  // if we have seen these devices for X seconds (from Home Assistant)
              id(last_event_time) = current_time;
              if (id(${device_internal_name}_use_buzzer).state) {
                id(trigger_buzzer).execute();
              }
              return true;
            }
          }
        } else if (!(id(${device_internal_name}_check_phone).state) && (id(${device_internal_name}_airtag_rssi).state >= id(rssi_threshold_value))) {
          if (id(homeassistant_time).now().is_valid()) {

            // Check if `last_event_time` is set, and if not, initialize it
            if (id(last_event_time) == 0) {
              id(last_event_time) = current_time;
            }

            // Calculate the time difference in seconds
            unsigned long time_difference = current_time - id(last_event_time);

            if (time_difference >= 300) {  // If a lot of time has passed, let's reset it...
              id(last_event_time) = current_time;
              return id(room_presence).state;
            } else if (time_difference >= id(rssi_threshold_value)) {  // if we have seen these devices for X seconds (from Home Assistant)
              id(last_event_time) = current_time;
              if (id(${device_internal_name}_use_buzzer).state) {
                id(trigger_buzzer).execute();
              }
              return true;
            }
          }
        } else {
          id(last_event_time) = 0;
          return false;
        }
      } else if (id(room_presence_debounce).state < 0.01) {
        id(last_event_time) = 0;
        return false;
      } else {
        id(last_event_time) = 0;
        return id(room_presence).state;
      } 
      id(last_event_time) = 0;
      return id(room_presence).state;

################################################################################
# Sensors
################################################################################
sensor:
  #-------------------------------------------------------------------------------
  # ESP32 internal sensors
  #-------------------------------------------------------------------------------
  # Temperature
  - platform: internal_temperature
    name: Internal Temperature
    update_interval: ${device_sampling_time}

  - platform: debug
    free:
      name: Heap free
      id: ${device_internal_name}_heap_free
    block:
      name: Heap max block
      id: ${device_internal_name}_heap_max_block
    loop_time:
      name: Loop time
      id: ${device_internal_name}_loop_time

  - platform: template
    name: Heap free (%)
    id: ${device_internal_name}_heap_free_percent
    unit_of_measurement: '%'
    accuracy_decimals: 2
    icon: mdi:percent
    update_interval: ${device_sampling_time}
    entity_category: diagnostic
    # 524288 B (SRAM total)
    # 327680 B (DRAM usable)
    lambda: return ( id(${device_internal_name}_heap_free).state * 100 / 327680 );

  - platform: template
    name: Heap max block (%)
    id: ${device_internal_name}_heap_max_block_percent
    unit_of_measurement: '%'
    accuracy_decimals: 2
    icon: mdi:percent
    update_interval: ${device_sampling_time}
    entity_category: diagnostic
    # 524288 B (SRAM total)
    # 327680 B (DRAM usable)
    lambda: return ( id(${device_internal_name}_heap_max_block).state * 100 / 327680 );

  - platform: template
    name: "ESP Flash Usage"
    id: ${device_internal_name}_flash_usage
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 10s
    icon: mdi:percent
    entity_category: diagnostic
    lambda: |-
      // Get the partition where the app (sketch) is stored
      const esp_partition_t *running_partition = esp_ota_get_running_partition();

      // Total size of the partition (where the sketch is stored)
      size_t total_sketch_space = running_partition->size;

      // Get the size of the currently running sketch (firmware)
      // Using an estimate here since direct function isn't available, hence the 0.888 multiplier below
      size_t used_sketch_space = total_sketch_space - (esp_get_free_heap_size() * sizeof(void*));

      // Calculate percentage of used space
      float sketch_flash_usage_percentage = (used_sketch_space * 0.888 * 100.0) / total_sketch_space;

      // No need to keep calculating or sending this value after a minute from safe start.
      int seconds = round(id(${device_internal_name}_uptime_sensor).raw_state);
      if (seconds >= 60) {
        id(${device_internal_name}_flash_usage).stop_poller();
        id(${device_internal_name}_firmware_sketch_version).stop_poller();
        ESP_LOGD("polling_attributes", "Stopped polling Flash Usage and Sketch Version");
      }
      // Log flash usage details for debugging Used flash for sketch: 1533200 bytes, Total sketch space: 1835008 bytes
      ESP_LOGD("flash_usage", "Used flash for sketch: %u bytes, Total sketch space: %u bytes", used_sketch_space, total_sketch_space);

      return sketch_flash_usage_percentage;

  #-------------------------------------------------------------------------------
  # ESP Generic Sensors
  #-------------------------------------------------------------------------------
  # WiFi
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: ${device_internal_name}_wifi_signal_sensor
    update_interval: ${device_sampling_time}

  # Uptime
  - platform: uptime
    name: "Uptime Sensor"
    id: ${device_internal_name}_uptime_sensor
    update_interval: ${device_sampling_time}
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${device_internal_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${device_internal_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  #-------------------------------------------------------------------------------
  # Custom Sensors
  #-------------------------------------------------------------------------------
  - platform: template
    id: ${device_internal_name}_airtag_rssi
    name: "AirTag $location RSSI"
    icon: mdi:bluetooth-audio
    device_class: signal_strength
    unit_of_measurement: dBm
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: |-
            if (id(${device_internal_name}_airtag_rssi).state >= id(rssi_threshold_value)) {
              id(room_presence_debounce).publish_state(1);
            } else {
              id(room_presence_debounce).publish_state(0);
            }
        - script.execute: presence_timeout  # Publish 0 if no rssi received
  
  - platform: template
    id: ${device_internal_name}_phone_rssi
    name: "Phone $location RSSI"
    icon: mdi:bluetooth-audio
    device_class: signal_strength
    unit_of_measurement: dBm
    accuracy_decimals: 0
  
  - platform: template
    id: room_presence_debounce

  - platform: homeassistant
    name: ${location} HA RSSI Present Value
    entity_id: input_number.${location}_rssi_present
    id: ha_rssi_threshold
    internal: true
    on_value:
      then:
        - lambda: |-
            id(rssi_threshold_value) = id(ha_rssi_threshold).state;
            ESP_LOGI("ble_adv", "RSSI Threshold updated from HA: %.1f dBm", id(rssi_threshold_value));

  - platform: homeassistant
    name: ${location} HA Time Present Value
    entity_id: input_number.${location}_time_present
    id: ha_time_threshold
    internal: true
    on_value:
      then:
        - lambda: |-
            id(time_threshold_value) = id(ha_time_threshold).state;
            ESP_LOGI("ble_adv", "Time Threshold updated from HA: %i seconds", id(time_threshold_value));

  - platform: template
    name: Firmware Sketch Version
    id: ${device_internal_name}_firmware_sketch_version
    icon: mdi:new-box
    entity_category: diagnostic
    update_interval: ${device_sampling_time}
    lambda: return ${sketchVersion};
    
################################################################################
# Text Sensors
################################################################################
text_sensor:
  #-------------------------------------------------------------------------------
  # ESP32 internal sensors
  #-------------------------------------------------------------------------------
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ${device_internal_name}_ip_address
    ssid:
      name: Connected SSID
      id: ${device_internal_name}_connected_ssid
    mac_address:
      name: Mac Wifi Address
      id: ${device_internal_name}_mac_address

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  #-------------------------------------------------------------------------------
  # Custom Text sensors
  #-------------------------------------------------------------------------------
  - platform: template
    name: Uptime Human Readable
    id: ${device_internal_name}_uptime_human
    icon: mdi:clock-start

################################################################################
# Switch
################################################################################
switch:  
  - platform: gpio
    name: "Buzzer"
    pin: 
      number: ${buzzer_pin}
      mode: 
        output: true
    id: ${device_internal_name}_buzzer
    icon: mdi:alarm-light
    on_turn_on:
      - light.turn_on: ${device_internal_name}_status_led
    on_turn_off:
      - light.turn_off: ${device_internal_name}_status_led

  - platform: template
    name: "Check Phone"
    id: ${device_internal_name}_check_phone
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "Buzzer when detected"
    id: ${device_internal_name}_use_buzzer
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: restart
    name: "Restart"
    id: device_restart
  
  - platform: safe_mode
    name: Use Safe Mode
    id: device_safe_mode

################################################################################
# Light
################################################################################
light:
  - platform: status_led
    pin: ${led_pin}
    id: ${device_internal_name}_status_led

################################################################################
# Interval
################################################################################
interval:
  - interval: 10s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;

################################################################################
# Scripts
################################################################################
script:
  # Publish event every 30 seconds when no rssi received
  - id: presence_timeout
    mode: restart
    then:
      - delay: 10s
      - lambda: |-
          id(room_presence_debounce).publish_state(0);
      - script.execute: presence_timeout
    
  # Trigger Function 
  - id: trigger_buzzer
    mode: single
    then:
      - logger.log: "Running Buzzer script"
      - switch.turn_on: ${device_internal_name}_buzzer
      - delay: 500ms
      - switch.turn_off: ${device_internal_name}_buzzer
      - delay: 250ms
      - switch.turn_on: ${device_internal_name}_buzzer
      - delay: 500ms
      - switch.turn_off: ${device_internal_name}_buzzer
      - delay: 250ms
      - switch.turn_on: ${device_internal_name}_buzzer
      - delay: 500ms
      - switch.turn_off: ${device_internal_name}_buzzer
      - delay: 2s

################################################################################
# Enable ESP32 BLE tracker
################################################################################
esp32_ble_tracker:
  scan_parameters:
    active: false
    duration: 4s
    continuous: true
  on_ble_advertise:
    - then:
      - lambda: |-
          // Function to clean up the manufacturer data
          auto normalize_string = [](std::string str) -> std::string {
            str.erase(std::remove(str.begin(), str.end(), '.'), str.end());  // Remove dots
            if (str.find("0x") == 0) str = str.substr(2);  // Remove "0x" prefix if it exists
            std::transform(str.begin(), str.end(), str.begin(), ::tolower);  // Convert to lowercase
            return str;
          };

          // set up and clean variables
          optional<int16_t> airtag_best_rssi = nullopt;
          optional<int16_t> phone_best_rssi = nullopt;
          const int16_t rssi = x.get_rssi();
          std::string manuf_data = "";
          std::string phone_uuid = normalize_string("${phone_uuid}");
          std::string airtag_uuid = normalize_string("${airtag_uuid}");

          for (auto data : x.get_manufacturer_datas()) {
            manuf_data = data.uuid.to_string() + '.' + format_hex_pretty(data.data);
          }
          // Normalize the manuf_data string
          std::string normalized_manuf_data = normalize_string(manuf_data);

          // If phone found..
          if ((normalized_manuf_data.find(phone_uuid) != std::string::npos) && (manuf_data.find("${phone_uuid_length}") != std::string::npos)) {
            phone_best_rssi = max(rssi, phone_best_rssi.value_or(rssi));
            id(phone_max_rssi_scanned) = *phone_best_rssi;

            // If we are already below the Home Assistant threshold, don't wait for the scan to finish and just go and update the value
            if (id(phone_max_rssi_scanned) >= id(rssi_threshold_value)) {
              id(${device_internal_name}_phone_rssi).publish_state(id(phone_max_rssi_scanned));
            }
          }
          // If AirTag found... 
          else if ((normalized_manuf_data.find(airtag_uuid) != std::string::npos) && (manuf_data.find("${airtag_uuid_length}") != std::string::npos)) {
            airtag_best_rssi = max(rssi, airtag_best_rssi.value_or(rssi));
            id(airtag_max_rssi_scanned) = *airtag_best_rssi;
            
            // If we are already below the Home Assistant threshold, don't wait for the scan to finish and just go and update the value
            if (id(airtag_max_rssi_scanned) >= id(rssi_threshold_value)) {
              id(${device_internal_name}_airtag_rssi).publish_state(id(airtag_max_rssi_scanned));
            }
          }
          
  on_scan_end: 
    - then:
      - lambda: |- 
          if (id(airtag_max_rssi_scanned)) {
            id(${device_internal_name}_airtag_rssi).publish_state(id(airtag_max_rssi_scanned));
          }
          if (id(phone_max_rssi_scanned)) {
            id(${device_internal_name}_phone_rssi).publish_state(id(phone_max_rssi_scanned));
          }
          
